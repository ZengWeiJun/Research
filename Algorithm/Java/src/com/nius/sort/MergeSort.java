package com.nius.sort;

public class MergeSort<T extends Comparable<T>> extends Sort<T> {

    // 归并培训
    // 归并排序的总思想是，先讲一个序列不断二分
    // 直到每个数都分为单个元素的序列时，再两两按顺序合并
    // divide --> merge 过程
    // [5, 3, 2, 4, 1]   mid = (0 + 4)/2 = 2
    // [5, 3]   [2, 4, 1] 继续上述过程
    // [5] [3]   [2] [4, 1]
    // [5] [3]   [2]  [4] [1]
    // 合并
    // [5] [3]   [2]  [1, 4]
    // [3, 5]   [1, 2, 4]
    // [3, 5]   [1, 2, 4]
    // [1, 2, 3, 4, 5]

    // 可以看出，由于上述元素为基数，分配不均
    // 所以最后分割的片段会出现，不过无论是否均匀，最多只会存在某一半序列分割后多一个元素
    // 但是最终都会全部分割为单个元素的片段，最终将各个小片段按照分割步骤的逆序，按序合并
    // 单个序列为双元素序列，进而合并为四元素、八元素序列...最终合并为一个全然有序的序列

    @Override
    protected void sort() {

    }

    private void sort(int begin, int end) {

    }

    private void merge() {

    }
}
